import telebot
from config import TOKEN
from datetime import date
import time
from telebot import types
import requests

from data import db_session
from data.users import User


bot = telebot.TeleBot(TOKEN)

db_session.global_init('db/record.sqlite')
session = db_session.create_session()


@bot.message_handler(commands=['start'])
def startcommand(message):
    time.sleep(0.3)
    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã')
    btn2 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã')
    btn3 = types.KeyboardButton('–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞')
    markup.add(btn1, btn2)
    markup.row(btn3)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üëã!')
    time.sleep(0.3)
    bot.send_message(message.chat.id, text="–≠—Ç–æ –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.", reply_markup=markup)


@bot.message_handler(commands=['help'])
def help_command(message):
    time.sleep(0.3)
    text_message = f'''–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã" –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã" —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'''
    bot.send_message(message.chat.id, text_message)


@bot.message_handler()
def on_click(message):
    if message.text == '–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å –≤ –≤–∏–¥–µ [–ö–ê–¢–ï–ì–û–†–ò–Ø-–¶–ï–ù–ê]:')
        bot.register_next_step_handler(message, repeat_all_messages)
    elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã':
        for user in session.query(User).all():
            text_message = f'{user.today} \n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.user_name} \n–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {user.category} \n—Å—É–º–º–∞: {user.price}\n'
            bot.send_message(message.chat.id, text_message)
    elif message.text == '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞':
        bot.register_next_step_handler(message, organization)



def repeat_all_messages(message):
        try:
            today = date.today().strftime("%d.%m.%Y")

            #  —Ä–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ 2 —á–∞—Å—Ç–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ü–µ–Ω–∞
            category, price = message.text.split("-", 1)
            text_message = f'–ù–∞ {today} –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category}, —Å—É–º–º–∞ {price} —Å—É–º'
            bot.send_message(message.chat.id, text_message)

            # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            user = User()
            user.user_name = message.from_user.first_name
            user.category = category
            user.price = price
            session.add(user)
            session.commit()
        except:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–ø–æ–≤–µ—â–∞–µ–º –µ–≥–æ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–æ–¥–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            bot.send_message(message.chat.id, '–û–®–ò–ë–ö–ê! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å –≤ –≤–∏–¥–µ [–ö–ê–¢–ï–ì–û–†–ò–Ø-–¶–ï–ù–ê]:')


@bot.message_handler()
def get_message_text(message):
    if '–ø—Ä–∏–≤' in message.text.lower():
        time.sleep(0.3)
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!‚ò∫‚ò∫‚ò∫')


def organization(message):
    if message.text == '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–ï–¥–∞', callback_data='food')
        btn2 = types.InlineKeyboardButton('–ö–∏–Ω–æ', callback_data='cinema')
        btn3 = types.InlineKeyboardButton('–°–ø–æ—Ä—Ç', callback_data='sport')
        markup.add(btn1, btn2, btn3)
        text_message = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:'
        bot.send_message(message.chat.id, text_message, reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: True)
def callback_1(callback):
    bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥')
    bot.register_next_step_handler(callback.message, poisk)


def poisk(message):
    apikey = "9ec7254a-4fc4-49cf-b617-89cd8e5f5860"
    if message.text == '–ï–¥–∞':
        request = f'https://search-maps.yandex.ru/v1/?text=–ï–¥–∞,–ü—Å–∫–æ–≤&type=biz&lang=ru_RU&apikey={apikey}'
    elif message.text == '–ö–∏–Ω–æ':
        request = f'https://search-maps.yandex.ru/v1/?text=–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã,–ü—Å–∫–æ–≤&type=biz&lang=ru_RU&apikey={apikey}'
    elif message.text == '–°–ø–æ—Ä—Ç':
        request = f'https://search-maps.yandex.ru/v1/?text=–§–∏—Ç–Ω–µ—Å–∫–ª—É–±—ã,–ü—Å–∫–æ–≤&type=biz&lang=ru_RU&apikey={apikey}'
    else:
        request = f'https://search-maps.yandex.ru/v1/?text=–ö–ª—É–±—ã,–ü—Å–∫–æ–≤&type=biz&lang=ru_RU&apikey={apikey}'
    responce = requests.get(request)
    if responce:
        try:
            for i in range(1, 10):
                json = responce.json()['features'][i]['properties']['CompanyMetaData']['Categories'][0]['name']
                json1 = responce.json()['features'][i]['properties']['CompanyMetaData']['Hours']['text']
                json2 = responce.json()['features'][i]['properties']['CompanyMetaData']['name']
                json3 = responce.json()['features'][i]['properties']['CompanyMetaData']['address']
                json4 = responce.json()['features'][i]['properties']['CompanyMetaData']['Phones'][0]['formatted']
                text_message = f'{json}, {json2} \n{json3} \n{json1} \n{json4}\n'
                bot.send_message(message.chat.id, text_message)
        except:
            pass
    # https://search-maps.yandex.ru/v1/?text=–∫–∞—Ñ–µ,–ü—Å–∫–æ–≤&type=biz&lang=ru_RU&apikey=9ec7254a-4fc4-49cf-b617-89cd8e5f5860


# START
bot.polling(none_stop=True)
