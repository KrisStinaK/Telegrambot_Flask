import datetime
import telebot
from config import TOKEN
import time
from telebot import types
import requests
import openai
import pygame

from data import db_session
from data.users import User


bot = telebot.TeleBot(TOKEN)
# openai.api_key = "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"
db_session.global_init('db/record.sqlite')
session = db_session.create_session()

calc_mode = False
gpt_mode = False
balanc = 0


@bot.message_handler(commands=['help'])
def help_command(message):
    time.sleep(0.3)
    text = f'–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã \n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—Ö–æ–¥—ã\n–†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–∞–º' \
           f'\n–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å\n–ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É\n' \
           f'–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã \n–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n–î–æ–±–∞–≤–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª\n–ë–∞–ª–∞–Ω—Å'
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['start'])
def startcommand(message):
    time.sleep(0.3)
    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã')
    btn2 = types.KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã')
    btn3 = types.KeyboardButton('–ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    btn4 = types.KeyboardButton('–†–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–∞–º')
    btn5 = types.KeyboardButton('–û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å')
    btn6 = types.KeyboardButton('–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É')
    btn7 = types.KeyboardButton('–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã')
    btn8 = types.KeyboardButton('/calc')
    btn9 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª')
    btn10 = types.KeyboardButton('–ë–∞–ª–∞–Ω—Å')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    markup.row(btn6, btn7, btn8, btn9, btn10)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üëã!')
    time.sleep(0.3)
    bot.send_message(message.chat.id, text="–≠—Ç–æ –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.", reply_markup=markup)
    bot.send_message(message.chat.id, '–í—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/help" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π')


@bot.message_handler(commands=['calc'])
def switch_calc_mode(message):
    global calc_mode
    if calc_mode:
        bot.send_message(message.chat.id, '—Ä–µ–∂–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω')
        calc_mode = False
        print(calc_mode)
    else:
        bot.send_message(message.chat.id, '—Ä–µ–∂–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∫–ª—é—á–µ–Ω')
        calc_mode = True
        print(calc_mode)


@bot.message_handler(commands=['gpt'])
def switch_calc_mode(message):
    global gpt_mode
    if gpt_mode:
        bot.send_message(message.chat.id, '—Ä–µ–∂–∏–º gpt –≤—ã–∫–ª—é—á–µ–Ω')
        gpt_mode = False
        print(gpt_mode)
    else:
        bot.send_message(message.chat.id, '—Ä–µ–∂–∏–º gpt –≤–∫–ª—é—á–µ–Ω')
        gpt_mode = True
        print(gpt_mode)


@bot.message_handler()
def on_click(message):
    if calc_mode:
        bot.reply_to(message, calculate(message.text))
    if gpt_mode:
        process_request(message)
    else:
        if message.text.lower() == '–∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å –≤ –≤–∏–¥–µ [–ö–ê–¢–ï–ì–û–†–ò–Ø-–¶–ï–ù–ê-–í–ê–õ–Æ–¢–ê]:')
            bot.register_next_step_handler(message, repeat_all_messages)
        elif message.text.lower() == '–ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã':
            for user in session.query(User).all():
                text_message = f'{user.today} \n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.user_name} \n–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {user.category} \n—Å—É–º–º–∞: {user.price}\n'
                bot.send_message(message.chat.id, text_message)
        elif message.text.lower() == '–ø–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏':
            text_message = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ["–ö–ê–¢–ï–ì–û–†–ò–Ø", "–ì–û–†–û–î"]:'
            bot.send_message(message.chat.id, text_message)
            bot.register_next_step_handler(message, poisk)
        elif message.text.lower() == '—Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–∞–º':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥')
            bot.register_next_step_handler(message, expenses_by_dates)
        elif message.text.lower() == '–æ–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥')
            bot.register_next_step_handler(message, amount_of_expenses)
        elif message.text.lower() == '–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–í –∫–∞–∫—É—é(GBP)-–ò–∑ –∫–∞–∫–æ–π(GBP)-–°–∫–æ–ª—å–∫–æ]')
            bot.register_next_step_handler(message, currency)
        elif message.text.lower() == '–∫—É—Ä—Å –≤–∞–ª—é—Ç—ã':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ (GBP)')
            bot.register_next_step_handler(message, currency_exchange_rate)
        elif message.text.lower() == '–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª':
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–∞–ø–∏—Ç–∞–ª')
            bot.register_next_step_handler(message, capital)
        elif message.text.lower() == '–±–∞–ª–∞–Ω—Å':
            bot.register_next_step_handler(message, balance)


@bot.message_handler()
def process_request(message):
    try:
        if message.text.lower() not in ['–∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã', '–ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã',
                                        '–∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å?', '—Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–∞—Ç–∞–º',
                                        '–æ–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å', '–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É',
                                        '–∫—É—Ä—Å –≤–∞–ª—é—Ç—ã', '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–ø–∏—Ç–∞–ª', '–ë–∞–ª–∞–Ω—Å']:

            # Get user message
            user_message = message.text
            response = openai.Completion.create(
                engine="text-davinci-003",
                prompt=user_message,
                max_tokens=50
            )

            # Get OpenAI response
            bot_response = response.choices[0].text

            # Send response to user
            bot.reply_to(message, bot_response)
        else:
            bot.register_next_step_handler(message, on_click)

    except Exception as e:
        # Handle errors
        bot.reply_to(message, "Sorry, I couldn't process your request. Please try again later.")


def calculate(message):
    try:
        result = eval(message)
        return str(result)
    except ZeroDivisionError:
        return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ'
    except:
        return '–û—Ç–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞'


def is_calc_type(message):
    if '+' in message.text or '-' in message.text or '*' in message.text or\
            '/' in message.text or '//' in message.text or '%' in message.text and \
            message.text[1] != '/':
        return True
    else:
        return False


def repeat_all_messages(message):
    global balanc
    try:
        category, price, currency = message.text.split('-')
        today = datetime.date.today()
        text_message = f'–ù–∞ {today} –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category}, —Å—É–º–º–∞ {price} {currency}'
        bot.send_message(message.chat.id, text_message)
        balanc -= int(price)

        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        user = User()
        user.user_name = message.from_user.first_name
        user.category = category
        user.price = price
        user.currency = currency
        user.today = today
        user.capital = balanc
        session.add(user)
        session.commit()
    except:
        bot.send_message(message.chat.id, '–û–®–ò–ë–ö–ê! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')


def expenses_by_dates(message):
    expenses = []
    for user in session.query(User).all():
        if user.today == message.text:
            expenses.append(f'{user.today} \n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.user_name} \n–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {user.category} \n—Å—É–º–º–∞: {user.price}\n')
    if expenses:
        for i in expenses:
            bot.send_message(message.chat.id, i)
    else:
        bot.send_message(message.chat.id, '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤')


def amount_of_expenses(message):
    total_amount = []
    for user in session.query(User).all():
        if user.today == message.text:
            total_amount.append(user.price)
    if total_amount:
        bot.send_message(message.chat.id, str(sum(list(map(int, total_amount)))))
        print(sum(list(map(int, total_amount))))
    else:
        bot.send_message(message.chat.id, '–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤')


def capital(message):
    global balanc
    try:
        balanc += int(message.text)
        user = User()
        user.capital = int(message.text)
        session.add(user)
        session.commit()
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É —Å—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å!')
    except:
        bot.send_message(message.chat.id, '–û–®–ò–ë–ö–ê! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')


def balance(message):
    global balanc
    bot.send_message(message.chat.id, str(balanc))


def currency(message):
    cur, is_cur, bablo = message.text.split('-')
    url = f"https://api.apilayer.com/fixer/convert?to={cur}&from={is_cur}&amount={bablo}"

    payload = {}
    headers = {
        "apikey": "rUFaftGw0CkdMq4KL8ZMCMxezCLLeigq"
    }

    response = requests.request("GET", url, headers=headers, data=payload)
    if response:
        try:
            json = response.json()['result']
            bot.send_message(message.chat.id, str(json))
        except:
            bot.send_message(message.chat.id, '–û–®–ò–ë–ö–ê! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')


def currency_exchange_rate(message):
    try:
        data = requests.get('https://www.cbr-xml-daily.ru/daily_json.js').json()
        bot.send_message(message.chat.id, f"{data['Valute'][message.text]['Value']} ‚ÇΩ")
    except:
        bot.send_message(message.chat.id, '–û–®–ò–ë–ö–ê! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')


def poisk(message):
    apikey = "9ec7254a-4fc4-49cf-b617-89cd8e5f5860"
    sp = message.text.split(', ')
    sp2 = []
    request = f'https://search-maps.yandex.ru/v1/?text={sp[0]},{sp[1]}&type=biz&lang=ru_RU&apikey={apikey}'
    response = requests.get(request)
    if response:
        try:
            for i in range(1, 20):
                json = response.json()['features'][i]['properties']['CompanyMetaData']['Categories'][0]['name']
                json1 = response.json()['features'][i]['properties']['CompanyMetaData']['Hours']['text']
                json2 = response.json()['features'][i]['properties']['CompanyMetaData']['name']
                json3 = response.json()['features'][i]['properties']['CompanyMetaData']['address']
                json4 = response.json()['features'][i]['properties']['CompanyMetaData']['Phones'][0]['formatted']
                json_st = response.json()['features'][i]['geometry']['coordinates'][0]
                json_st2 = response.json()['features'][i]['geometry']['coordinates'][1]
                sp2.append(json_st), sp2.append(json_st2)
                text_message = f'{json}, {json2} \n{json3} \n{json1} \n{json4}\n'
                bot.send_message(message.chat.id, text_message)
        except:

            bot.send_message(message.chat.id, '–û–®–ò–ë–ö–ê! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
            pygame.init()

        request = f'https://static-maps.yandex.ru/1.x/?pt={sp2[0]},{sp2[1]},org~{sp2[2]},' \
                  f'{sp2[3]},org~{sp2[4]},{sp2[5]},org~{sp2[6]},{sp2[7]},org~{sp2[8]},{sp2[9]},org,&z=13&size=650,450&l=map'
        print(sp2)
        response = requests.get(request)
        if response:
            with open('map.jpeg', mode='wb') as map_file:
                map_file.write(response.content)
            photo = open('map.jpeg', 'rb')
            bot.send_photo(message.chat.id, photo)
        else:
            raise RuntimeError


    # https://search-maps.yandex.ru/v1/?text=–∫–∞—Ñ–µ,–ü—Å–∫–æ–≤&type=biz&lang=ru_RU&apikey=9ec7254a-4fc4-49cf-b617-89cd8e5f5860


# START
bot.polling(none_stop=True)